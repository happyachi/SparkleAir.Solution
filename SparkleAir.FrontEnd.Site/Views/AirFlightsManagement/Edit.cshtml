@model SparkleAir.Infa.ViewModel.AirFlights.AirFlightManagementVm
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css" rel="stylesheet">
@{
	ViewBag.Title = "Edit";
}
<h2>@Model.FlightCode</h2>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
<div class="form-horizontal">
	@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	@Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.DepartureAirportId)
	@Html.HiddenFor(model => model.ArrivalAirportId)

	@Html.HiddenFor(model => model.FlightCode)
	@Html.HiddenFor(model => model.DepartureAirportId)
	@Html.HiddenFor(model => model.ArrivalAirportId)
	@Html.HiddenFor(model => model.AirOwnId)

	<div class="mb-3">
		@Html.LabelFor(model => model.DepartureAirport, htmlAttributes: new { @class = "control-label col-md-2" })
		<select class="form-select" aria-label="Default select example" name="DepartureAirport" id="departureAir">
			<option selected>@Model.DepartureAirport</option>

			@foreach (var airport in ViewBag.Airports)
			{
				<option value="@airport.Lata">@airport.Lata</option>
			}
		</select>
		@Html.ValidationMessageFor(model => model.DepartureAirport, "", new { @class = "text-danger" })
	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.DepartureTimeZone, htmlAttributes: new { @class = "control-label col-md-2" })

		@Html.EditorFor(model => model.DepartureTimeZone, new { htmlAttributes = new { @class = "form-control deptTimeZone", @readonly = "readonly" } })
		@Html.ValidationMessageFor(model => model.DepartureTimeZone, "", new { @class = "text-danger" })

	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.ArrivalAirport, htmlAttributes: new { @class = "control-label col-md-2" })
		<select class="form-select" aria-label="Default select example" name="ArrivalAirport" id="arrivalAir">
			<option selected>@Model.ArrivalAirport</option>

			@foreach (var airport in ViewBag.Airports)
			{
				<option value="@airport.Lata">@airport.Lata</option>
			}
		</select>
		@Html.ValidationMessageFor(model => model.ArrivalAirport, "", new { @class = "text-danger" })
	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.ArrivalTimeZone, htmlAttributes: new { @class = "control-label col-md-2" })

		@Html.EditorFor(model => model.ArrivalTimeZone, new { htmlAttributes = new { @class = "form-control arriTimeZone", @readonly = "readonly" } })
		@Html.ValidationMessageFor(model => model.ArrivalTimeZone, "", new { @class = "text-danger" })

	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.DepartureTerminal, htmlAttributes: new { @class = "control-label col-md-2" })

		@Html.EditorFor(model => model.DepartureTerminal, new { htmlAttributes = new { @class = "form-control" } })
		@Html.ValidationMessageFor(model => model.DepartureTerminal, "", new { @class = "text-danger" })

	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.ArrivalTerminal, htmlAttributes: new { @class = "control-label col-md-2" })

		@Html.EditorFor(model => model.ArrivalTerminal, new { htmlAttributes = new { @class = "form-control" } })
		@Html.ValidationMessageFor(model => model.ArrivalTerminal, "", new { @class = "text-danger" })

	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.DepartureTime, htmlAttributes: new { @class = "control-label col-md-2" })

		<input type="time" id="DepartureTime" name="DepartureTime" class="form-control" value="@Model.DepartureTime" />

		@Html.ValidationMessageFor(model => model.DepartureTime, "", new { @class = "text-danger" })
	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.ArrivalTime, htmlAttributes: new { @class = "control-label col-md-2" })

		<input type="time" id="ArrivalTime" name="ArrivalTime" class="form-control" value="@Model.ArrivalTime" />

		@Html.ValidationMessageFor(model => model.ArrivalTime, "", new { @class = "text-danger" })

	</div>
	<div class="mb-3">
		@Html.LabelFor(model => model.CrossDay, htmlAttributes: new { @class = "control-label col-md-2" })

		@Html.EditorFor(model => model.CrossDay, new { htmlAttributes = new { @class = "form-control" } })
		@Html.ValidationMessageFor(model => model.CrossDay, "", new { @class = "text-danger" })
	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.DayofWeek, htmlAttributes: new { @class = "control-label col-md-2" })<br />

		@for (int day = 0; day < 7; day++)
		{
			<label class="checkbox-inline">
				@{
					// 星期天的值在顯示頁面時轉換為7
					int displayValue = (day) % 7 == 0 ? 7 : (day);

					// 檢查星期天是否被選中
					string[] selectedDays = Model.DayofWeek.Split(',');
					bool isChecked = selectedDays.Contains(displayValue.ToString());
				}
				<input type="checkbox" class="day-checkbox" name="selectedDays" value="@displayValue" @(isChecked ? "checked" : "") /> @Enum.GetName(typeof(DayOfWeek), day)
			</label>
		}
		<input type="hidden" id="DayofWeek" name="DayofWeek" value="@Model.DayofWeek" />
		@Html.ValidationMessageFor(model => model.DayofWeek, "", new { @class = "text-danger" })
	</div>

	<div class="mb-3">
		@Html.LabelFor(model => model.Mile, htmlAttributes: new { @class = "control-label col-md-2" })

		@Html.EditorFor(model => model.Mile, new { htmlAttributes = new { @class = "form-control" } })
		@Html.ValidationMessageFor(model => model.Mile, "", new { @class = "text-danger" })
	</div>

	<div class="mb-3">
		<div class="col-md-offset-2 col-md-10">
			<button class="btn btn-dark update" onclick="update()">更新</button>
			@*<input type="submit" value="更新" class="btn btn-dark"/>*@
			@Html.ActionLink("返回", "Index", null, new { @class = "btn btn-dark" })
		</div>
	</div>
</div>
}

<script>

</script>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")

<script>
			const deptAir = document.querySelector('#departureAir');
			const detpTime = document.querySelector('.deptTimeZone')
			deptAir.addEventListener('change', () => {
				const dept = deptAir.querySelector(`[value=${deptAir.value}]`);
				detpTime.value = dept.getAttribute('data-yu-dept');
			})

			const arriAir = document.querySelector('#arrivalAir');
			const arriTime = document.querySelector('.arriTimeZone')
			arriAir.addEventListener('change', () => {
				const arri = arriAir.querySelector(`[value=${arriAir.value}]`);
				arriTime.value = arri.getAttribute('data-yu-arri');
			})


			const checkboxes = document.querySelectorAll('.day-checkbox');
			checkboxes.forEach(function (checkbox) {
				checkbox.addEventListener('change', function () {
					updateDayOfWeekSelection();
				});
			});

			function updateDayOfWeekSelection() {
				const selectedDays = Array.from(checkboxes)
					.filter(checkbox => checkbox.checked)
					.map(checkbox => checkbox.value.toString()); // 將數字轉換為字符串

				// 將選中的星期以逗號分隔的字串形式存儲到 DayOfWeekSelection 屬性
				document.getElementById('DayofWeek').value = selectedDays.join(',');
			}

		$(".update").on("click", function (e) {
			e.preventDefault();
			Swal.fire({
				title: "你確定要更新嗎?",
				showCancelButton: true,
				confirmButtonText: "更新",
				cancelButtonText: "取消",
			}).then((result) => {

				if (result.isConfirmed) {
					$.ajax({
						url: "/AirFlightsManagement/Edit",
						type: "POST",
						data: $("form").serialize(),
						success: function (result) {
							if (result.success) {
								// 成功處理
								Swal.fire({
									icon: "success",
									title: "航班已更新",
									showConfirmButton: false,
									timer: 1700
								}).then(() => {
									window.location.href = '@Url.Action("Index", "AirFlightsManagement")';
								});
							} else {
								// 顯示錯誤信息
								Swal.fire({
									icon: "error",
									title: "錯誤",
									text: result.errors.join("\n")
								});
							}
						},
						error: function () {
							// 處理錯誤
							console.log("Error");
						}
					});
				} else if (result.isCanceled) {
					Swal.fire({
						title: "取消變更",
						icon: "info",
						timer: 1000
					}).then(() => {
									window.location.href = '@Url.Action("Index", "AirFlightsManagement")';
								});;
				}
			});
		});

</script>
}
